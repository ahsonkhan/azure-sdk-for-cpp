
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.
//
// Code generated by Microsoft (R) AutoRest C++ Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
#pragma once

#include <map>
#include <string>
#include <type_traits>
#include <vector>

#include <azure/core/context.hpp>
#include <azure/core/datetime.hpp>
#include <azure/core/etag.hpp>
#include <azure/core/internal/http/pipeline.hpp>
#include <azure/core/nullable.hpp>
#include <azure/core/response.hpp>
#include <azure/core/url.hpp>

namespace Azure {
namespace Data {
namespace AppConfiguration {
namespace Models {
struct Key final {
  std::string Name;
};
/**
 * @brief The result of a list request.
 */
struct KeyListResult final {
  /**
   * The collection value.
   */
  std::vector<Key> Items;
  /**
   * The URI that can be used to request the next set of paged results.
   */
  std::string NextLink;
};
/**
 * @brief Response type for #Azure::Data::AppConfiguration::Client::CheckKeys.
 */
struct CheckKeysResult final {
  /**
   * Enables real-time consistency between requests by providing the returned
   * value in the next request made to the server.
   */
  std::string SyncToken;
};
/**
 * @brief Used to select what fields are present in the returned resource(s).
 */
enum class Get6ItemsItem {
  None = 0,
  Key = 1,
  Label = 2,
  ContentType = 4,
  Value = 8,
  LastModified = 16,
  Tags = 32,
  Locked = 64,
  Etag = 128,
};
inline Get6ItemsItem operator|(Get6ItemsItem lhs, Get6ItemsItem rhs) {
  using type = std::underlying_type_t<Get6ItemsItem>;
  return static_cast<Get6ItemsItem>(static_cast<type>(lhs) |
                                    static_cast<type>(rhs));
}
inline Get6ItemsItem &operator|=(Get6ItemsItem &lhs, Get6ItemsItem rhs) {
  lhs = lhs | rhs;
  return lhs;
}
inline Get6ItemsItem operator&(Get6ItemsItem lhs, Get6ItemsItem rhs) {
  using type = std::underlying_type_t<Get6ItemsItem>;
  return static_cast<Get6ItemsItem>(static_cast<type>(lhs) &
                                    static_cast<type>(rhs));
}
inline Get6ItemsItem &operator&=(Get6ItemsItem &lhs, Get6ItemsItem rhs) {
  lhs = lhs & rhs;
  return lhs;
}
/**
 * @brief Used to select what fields are present in the returned resource(s).
 */
enum class Head6ItemsItem {
  None = 0,
  Key = 1,
  Label = 2,
  ContentType = 4,
  Value = 8,
  LastModified = 16,
  Tags = 32,
  Locked = 64,
  Etag = 128,
};
inline Head6ItemsItem operator|(Head6ItemsItem lhs, Head6ItemsItem rhs) {
  using type = std::underlying_type_t<Head6ItemsItem>;
  return static_cast<Head6ItemsItem>(static_cast<type>(lhs) |
                                     static_cast<type>(rhs));
}
inline Head6ItemsItem &operator|=(Head6ItemsItem &lhs, Head6ItemsItem rhs) {
  lhs = lhs | rhs;
  return lhs;
}
inline Head6ItemsItem operator&(Head6ItemsItem lhs, Head6ItemsItem rhs) {
  using type = std::underlying_type_t<Head6ItemsItem>;
  return static_cast<Head6ItemsItem>(static_cast<type>(lhs) &
                                     static_cast<type>(rhs));
}
inline Head6ItemsItem &operator&=(Head6ItemsItem &lhs, Head6ItemsItem rhs) {
  lhs = lhs & rhs;
  return lhs;
}
/**
 * @brief Response type for
 * #Azure::Data::AppConfiguration::Client::CheckKeyValues.
 */
struct CheckKeyValuesResult final {
  /**
   * Enables real-time consistency between requests by providing the returned
   * value in the next request made to the server.
   */
  std::string SyncToken;
};
/**
 * @brief Used to select what fields are present in the returned resource(s).
 */
enum class Get7ItemsItem {
  None = 0,
  Key = 1,
  Label = 2,
  ContentType = 4,
  Value = 8,
  LastModified = 16,
  Tags = 32,
  Locked = 64,
  Etag = 128,
};
inline Get7ItemsItem operator|(Get7ItemsItem lhs, Get7ItemsItem rhs) {
  using type = std::underlying_type_t<Get7ItemsItem>;
  return static_cast<Get7ItemsItem>(static_cast<type>(lhs) |
                                    static_cast<type>(rhs));
}
inline Get7ItemsItem &operator|=(Get7ItemsItem &lhs, Get7ItemsItem rhs) {
  lhs = lhs | rhs;
  return lhs;
}
inline Get7ItemsItem operator&(Get7ItemsItem lhs, Get7ItemsItem rhs) {
  using type = std::underlying_type_t<Get7ItemsItem>;
  return static_cast<Get7ItemsItem>(static_cast<type>(lhs) &
                                    static_cast<type>(rhs));
}
inline Get7ItemsItem &operator&=(Get7ItemsItem &lhs, Get7ItemsItem rhs) {
  lhs = lhs & rhs;
  return lhs;
}
/**
 * @brief Used to select what fields are present in the returned resource(s).
 */
enum class Head7ItemsItem {
  None = 0,
  Key = 1,
  Label = 2,
  ContentType = 4,
  Value = 8,
  LastModified = 16,
  Tags = 32,
  Locked = 64,
  Etag = 128,
};
inline Head7ItemsItem operator|(Head7ItemsItem lhs, Head7ItemsItem rhs) {
  using type = std::underlying_type_t<Head7ItemsItem>;
  return static_cast<Head7ItemsItem>(static_cast<type>(lhs) |
                                     static_cast<type>(rhs));
}
inline Head7ItemsItem &operator|=(Head7ItemsItem &lhs, Head7ItemsItem rhs) {
  lhs = lhs | rhs;
  return lhs;
}
inline Head7ItemsItem operator&(Head7ItemsItem lhs, Head7ItemsItem rhs) {
  using type = std::underlying_type_t<Head7ItemsItem>;
  return static_cast<Head7ItemsItem>(static_cast<type>(lhs) &
                                     static_cast<type>(rhs));
}
inline Head7ItemsItem &operator&=(Head7ItemsItem &lhs, Head7ItemsItem rhs) {
  lhs = lhs & rhs;
  return lhs;
}
/**
 * @brief Response type for
 * #Azure::Data::AppConfiguration::Client::CheckKeyValue.
 */
struct CheckKeyValueResult final {
  /**
   * Enables real-time consistency between requests by providing the returned
   * value in the next request made to the server.
   */
  std::string SyncToken;
  /**
   * An identifier representing the returned state of the resource.
   */
  Azure::ETag ETag;
  /**
   * A UTC datetime that specifies the last time the resource was modified.
   */
  std::string LastModified;
};
struct Label final {
  std::string Name;
};
/**
 * @brief Used to select what fields are present in the returned resource(s).
 */
enum class Get5ItemsItem {
  None = 0,
  Name = 1,
};
inline Get5ItemsItem operator|(Get5ItemsItem lhs, Get5ItemsItem rhs) {
  using type = std::underlying_type_t<Get5ItemsItem>;
  return static_cast<Get5ItemsItem>(static_cast<type>(lhs) |
                                    static_cast<type>(rhs));
}
inline Get5ItemsItem &operator|=(Get5ItemsItem &lhs, Get5ItemsItem rhs) {
  lhs = lhs | rhs;
  return lhs;
}
inline Get5ItemsItem operator&(Get5ItemsItem lhs, Get5ItemsItem rhs) {
  using type = std::underlying_type_t<Get5ItemsItem>;
  return static_cast<Get5ItemsItem>(static_cast<type>(lhs) &
                                    static_cast<type>(rhs));
}
inline Get5ItemsItem &operator&=(Get5ItemsItem &lhs, Get5ItemsItem rhs) {
  lhs = lhs & rhs;
  return lhs;
}
/**
 * @brief The result of a list request.
 */
struct LabelListResult final {
  /**
   * The collection value.
   */
  std::vector<Label> Items;
  /**
   * The URI that can be used to request the next set of paged results.
   */
  std::string NextLink;
};
/**
 * @brief Used to select what fields are present in the returned resource(s).
 */
enum class Head5ItemsItem {
  None = 0,
  Name = 1,
};
inline Head5ItemsItem operator|(Head5ItemsItem lhs, Head5ItemsItem rhs) {
  using type = std::underlying_type_t<Head5ItemsItem>;
  return static_cast<Head5ItemsItem>(static_cast<type>(lhs) |
                                     static_cast<type>(rhs));
}
inline Head5ItemsItem &operator|=(Head5ItemsItem &lhs, Head5ItemsItem rhs) {
  lhs = lhs | rhs;
  return lhs;
}
inline Head5ItemsItem operator&(Head5ItemsItem lhs, Head5ItemsItem rhs) {
  using type = std::underlying_type_t<Head5ItemsItem>;
  return static_cast<Head5ItemsItem>(static_cast<type>(lhs) &
                                     static_cast<type>(rhs));
}
inline Head5ItemsItem &operator&=(Head5ItemsItem &lhs, Head5ItemsItem rhs) {
  lhs = lhs & rhs;
  return lhs;
}
/**
 * @brief Response type for #Azure::Data::AppConfiguration::Client::CheckLabels.
 */
struct CheckLabelsResult final {
  /**
   * Enables real-time consistency between requests by providing the returned
   * value in the next request made to the server.
   */
  std::string SyncToken;
};
struct KeyValue final {
  std::string Key;
  std::string Label;
  std::string ContentType;
  std::string Value;
  DateTime LastModified;
  /**
   * Dictionary of <string>.
   */
  std::map<std::string, std::string> Tags;
  bool Locked = bool();
  ETag Etag;
};
/**
 * @brief Used to select what fields are present in the returned resource(s).
 */
enum class Enum6 {
  None = 0,
  Key = 1,
  Label = 2,
  ContentType = 4,
  Value = 8,
  LastModified = 16,
  Tags = 32,
  Locked = 64,
  Etag = 128,
};
inline Enum6 operator|(Enum6 lhs, Enum6 rhs) {
  using type = std::underlying_type_t<Enum6>;
  return static_cast<Enum6>(static_cast<type>(lhs) | static_cast<type>(rhs));
}
inline Enum6 &operator|=(Enum6 &lhs, Enum6 rhs) {
  lhs = lhs | rhs;
  return lhs;
}
inline Enum6 operator&(Enum6 lhs, Enum6 rhs) {
  using type = std::underlying_type_t<Enum6>;
  return static_cast<Enum6>(static_cast<type>(lhs) & static_cast<type>(rhs));
}
inline Enum6 &operator&=(Enum6 &lhs, Enum6 rhs) {
  lhs = lhs & rhs;
  return lhs;
}
/**
 * @brief The result of a list request.
 */
struct KeyValueListResult final {
  /**
   * The collection value.
   */
  std::vector<KeyValue> Items;
  /**
   * The URI that can be used to request the next set of paged results.
   */
  std::string NextLink;
};
/**
 * @brief Used to select what fields are present in the returned resource(s).
 */
enum class Enum7 {
  None = 0,
  Key = 1,
  Label = 2,
  ContentType = 4,
  Value = 8,
  LastModified = 16,
  Tags = 32,
  Locked = 64,
  Etag = 128,
};
inline Enum7 operator|(Enum7 lhs, Enum7 rhs) {
  using type = std::underlying_type_t<Enum7>;
  return static_cast<Enum7>(static_cast<type>(lhs) | static_cast<type>(rhs));
}
inline Enum7 &operator|=(Enum7 &lhs, Enum7 rhs) {
  lhs = lhs | rhs;
  return lhs;
}
inline Enum7 operator&(Enum7 lhs, Enum7 rhs) {
  using type = std::underlying_type_t<Enum7>;
  return static_cast<Enum7>(static_cast<type>(lhs) & static_cast<type>(rhs));
}
inline Enum7 &operator&=(Enum7 &lhs, Enum7 rhs) {
  lhs = lhs & rhs;
  return lhs;
}
/**
 * @brief Response type for
 * #Azure::Data::AppConfiguration::Client::CheckRevisions.
 */
struct CheckRevisionsResult final {
  /**
   * Enables real-time consistency between requests by providing the returned
   * value in the next request made to the server.
   */
  std::string SyncToken;
};
} // namespace Models
namespace _detail {
class Client final {
public:
  struct GetKeysOptions final {
    Nullable<std::string> Name;
    Nullable<std::string> SyncToken;
    Nullable<std::string> After;
    Nullable<std::string> AcceptDatetime;
  };
  static Response<Models::KeyListResult>
  GetKeys(Core::Http::_internal::HttpPipeline &pipeline, const Core::Url &url,
          const GetKeysOptions &options, const Core::Context &context);
  struct CheckKeysOptions final {
    Nullable<std::string> Name;
    Nullable<std::string> SyncToken;
    Nullable<std::string> After;
    Nullable<std::string> AcceptDatetime;
  };
  static Response<Models::CheckKeysResult>
  CheckKeys(Core::Http::_internal::HttpPipeline &pipeline, const Core::Url &url,
            const CheckKeysOptions &options, const Core::Context &context);
  struct GetKeyValuesOptions final {
    Nullable<std::string> Key;
    Nullable<std::string> Label;
    Nullable<std::string> SyncToken;
    Nullable<std::string> After;
    Nullable<std::string> AcceptDatetime;
    Nullable<Models::Get6ItemsItem> Select;
  };
  static Response<Models::KeyValueListResult>
  GetKeyValues(Core::Http::_internal::HttpPipeline &pipeline,
               const Core::Url &url, const GetKeyValuesOptions &options,
               const Core::Context &context);
  struct CheckKeyValuesOptions final {
    Nullable<std::string> Key;
    Nullable<std::string> Label;
    Nullable<std::string> SyncToken;
    Nullable<std::string> After;
    Nullable<std::string> AcceptDatetime;
    Nullable<Models::Head6ItemsItem> Select;
  };
  static Response<Models::CheckKeyValuesResult>
  CheckKeyValues(Core::Http::_internal::HttpPipeline &pipeline,
                 const Core::Url &url, const CheckKeyValuesOptions &options,
                 const Core::Context &context);
  struct GetKeyValueOptions final {
    Nullable<std::string> Label;
    Nullable<std::string> SyncToken;
    Nullable<std::string> AcceptDatetime;
    ETag IfMatch;
    ETag IfNoneMatch;
    Nullable<Models::Get7ItemsItem> Select;
  };
  static Response<Models::KeyValue>
  GetKeyValue(Core::Http::_internal::HttpPipeline &pipeline,
              const Core::Url &url, const GetKeyValueOptions &options,
              const Core::Context &context);
  struct PutKeyValueOptions final {
    Models::KeyValue Entity;
    Nullable<std::string> Label;
    Nullable<std::string> SyncToken;
    ETag IfMatch;
    ETag IfNoneMatch;
  };
  static Response<Models::KeyValue>
  PutKeyValue(Core::Http::_internal::HttpPipeline &pipeline,
              const Core::Url &url, const PutKeyValueOptions &options,
              const Core::Context &context);
  struct DeleteKeyValueOptions final {
    Nullable<std::string> Label;
    Nullable<std::string> SyncToken;
    ETag IfMatch;
  };
  static Response<Models::KeyValue>
  DeleteKeyValue(Core::Http::_internal::HttpPipeline &pipeline,
                 const Core::Url &url, const DeleteKeyValueOptions &options,
                 const Core::Context &context);
  struct CheckKeyValueOptions final {
    Nullable<std::string> Label;
    Nullable<std::string> SyncToken;
    Nullable<std::string> AcceptDatetime;
    ETag IfMatch;
    ETag IfNoneMatch;
    Nullable<Models::Head7ItemsItem> Select;
  };
  static Response<Models::CheckKeyValueResult>
  CheckKeyValue(Core::Http::_internal::HttpPipeline &pipeline,
                const Core::Url &url, const CheckKeyValueOptions &options,
                const Core::Context &context);
  struct GetLabelsOptions final {
    Nullable<std::string> Name;
    Nullable<std::string> SyncToken;
    Nullable<std::string> After;
    Nullable<std::string> AcceptDatetime;
    Nullable<Models::Get5ItemsItem> Select;
  };
  static Response<Models::LabelListResult>
  GetLabels(Core::Http::_internal::HttpPipeline &pipeline, const Core::Url &url,
            const GetLabelsOptions &options, const Core::Context &context);
  struct CheckLabelsOptions final {
    Nullable<std::string> Name;
    Nullable<std::string> SyncToken;
    Nullable<std::string> After;
    Nullable<std::string> AcceptDatetime;
    Nullable<Models::Head5ItemsItem> Select;
  };
  static Response<Models::CheckLabelsResult>
  CheckLabels(Core::Http::_internal::HttpPipeline &pipeline,
              const Core::Url &url, const CheckLabelsOptions &options,
              const Core::Context &context);
  struct PutLockOptions final {
    Nullable<std::string> Label;
    Nullable<std::string> SyncToken;
    ETag IfMatch;
    ETag IfNoneMatch;
  };
  static Response<Models::KeyValue>
  PutLock(Core::Http::_internal::HttpPipeline &pipeline, const Core::Url &url,
          const PutLockOptions &options, const Core::Context &context);
  struct DeleteLockOptions final {
    Nullable<std::string> Label;
    Nullable<std::string> SyncToken;
    ETag IfMatch;
    ETag IfNoneMatch;
  };
  static Response<Models::KeyValue>
  DeleteLock(Core::Http::_internal::HttpPipeline &pipeline,
             const Core::Url &url, const DeleteLockOptions &options,
             const Core::Context &context);
  struct GetRevisionsOptions final {
    Nullable<std::string> Key;
    Nullable<std::string> Label;
    Nullable<std::string> SyncToken;
    Nullable<std::string> After;
    Nullable<std::string> AcceptDatetime;
    Nullable<Models::Enum6> Select;
  };
  static Response<Models::KeyValueListResult>
  GetRevisions(Core::Http::_internal::HttpPipeline &pipeline,
               const Core::Url &url, const GetRevisionsOptions &options,
               const Core::Context &context);
  struct CheckRevisionsOptions final {
    Nullable<std::string> Key;
    Nullable<std::string> Label;
    Nullable<std::string> SyncToken;
    Nullable<std::string> After;
    Nullable<std::string> AcceptDatetime;
    Nullable<Models::Enum7> Select;
  };
  static Response<Models::CheckRevisionsResult>
  CheckRevisions(Core::Http::_internal::HttpPipeline &pipeline,
                 const Core::Url &url, const CheckRevisionsOptions &options,
                 const Core::Context &context);
};
} // namespace _detail
} // namespace AppConfiguration
} // namespace Data
} // namespace Azure